{% if cluster in ("datastores-us-central1") %}
{% macro deploy(mem_limit="4Gi", cpu_limit="250m") %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb
  namespace: {{ namespace }}
  labels:
    role: mariadb
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: failure-domain.beta.kubernetes.io/zone
            operator: In
            values:
            - us-central1-b
  replicas: 1
  selector:
    matchLabels:
      role: mariadb
  template:
    metadata:
      labels:
        role: mariadb
    spec:
      containers:
      - name: mariadb
        image: mariadb:10.3
        imagePullPolicy: Always
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sley-weatherapp
              key: mysql_root_password
        ports:
        - containerPort: 8888
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: "{{ cpu_limit }}"
            memory: "{{ mem_limit }}"
          limits:
            cpu: "{{ cpu_limit }}"
            memory: "{{ mem_limit }}"
        volumeMounts:
        - name: mariadb-data-volume
          mountPath: /var/lib/mysql
      volumes:
      - name: mariadb-data-volume
        gcePersistentDisk:
          pdName: sley-training-mariadb-data
          fsType: ext4
{% endmacro %}
{% if cluster == "staging" %}
# Give staging smaller resources than production.
{%- set mem_limit="100Mi" %}
{%- set cpu_limit="100m" %}
{% else %}
# Give not-staging (e.g. production) more resources.
{%- set mem_limit="1Gi" %}
{%- set cpu_limit="1" %}
{% endif %}
# We created a macro that will output the above
{{ deploy(mem_limit=mem_limit, cpu_limit=cpu_limit) }}
# vim:ft=ansible:
{% endif %}
